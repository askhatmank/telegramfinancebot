from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from calculations import *
from keyboards import get_main_kb
from logger import logger
import logging

router = Router()
logger = logging.getLogger(__name__)

class CalcStates(StatesGroup):
    waiting_for_credit = State()
    waiting_for_mortgage = State()
    waiting_for_deposit = State()
    waiting_for_vacation = State()

def format_currency(amount: float) -> str:
    return f"{amount:,.0f} ‚Ç∏".replace(",", " ")

def parse_input(text: str) -> list[float]:
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —á–∏—Å–ª–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏, –∑–∞–ø—è—Ç—ã–º–∏ –∏ —Ç–æ—á–∫–∞–º–∏
    return [float(x.replace(',', '.')) for x in text.split()]

@router.message(F.text == '/start')
async def start_cmd(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=get_main_kb()
    )

# ===== –ö–†–ï–î–ò–¢ =====
@router.message(F.text == '–ö—Ä–µ–¥–∏—Ç')
async def credit_cmd(message: Message, state: FSMContext):
    await state.set_state(CalcStates.waiting_for_credit)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–µ–¥–∏—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "–°—É–º–º–∞ –°—Ä–æ–∫(–ª–µ—Ç) –°—Ç–∞–≤–∫–∞(%)\n"
        "–ü—Ä–∏–º–µ—Ä: 5 000 000 5 10"
    )

@router.message(CalcStates.waiting_for_credit)
async def calculate_credit_handler(message: Message, state: FSMContext):
    try:
        nums = parse_input(message.text)
        if len(nums) != 3:
            raise ValueError("–ù—É–∂–Ω–æ —Ä–æ–≤–Ω–æ 3 —á–∏—Å–ª–∞!")
            
        payment, total, over = calculate_credit(*nums)
        await message.answer(
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –∫—Ä–µ–¥–∏—Ç—É:\n"
            f"‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {format_currency(payment)}\n"
            f"‚Ä¢ –û–±—â–∞—è –≤—ã–ø–ª–∞—Ç–∞: {format_currency(total)}\n"
            f"‚Ä¢ –ü–µ—Ä–µ–ø–ª–∞—Ç–∞: {format_currency(over)}"
        )
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

# ===== –ò–ü–û–¢–ï–ö–ê =====
@router.message(F.text == '–ò–ø–æ—Ç–µ–∫–∞')
async def mortgage_cmd(message: Message, state: FSMContext):
    await state.set_state(CalcStates.waiting_for_mortgage)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ø–æ—Ç–µ–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "–°—É–º–º–∞ –°—Ä–æ–∫(–ª–µ—Ç) –°—Ç–∞–≤–∫–∞(%) [–°—Ç—Ä–∞—Ö–æ–≤–∫–∞(%)]\n"
        "–ü—Ä–∏–º–µ—Ä: 10 000 000 20 7 1.5"
    )

@router.message(CalcStates.waiting_for_mortgage)
async def calculate_mortgage_handler(message: Message, state: FSMContext):
    try:
        nums = parse_input(message.text)
        if len(nums) not in (3, 4):
            raise ValueError("–ù—É–∂–Ω–æ 3 –∏–ª–∏ 4 —á–∏—Å–ª–∞!")
            
        insurance = nums[3] if len(nums) > 3 else 0.0
        payment, total, over = calculate_mortgage(nums[0], nums[1], nums[2], insurance)
        
        response = (
            f"üè† –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –∏–ø–æ—Ç–µ–∫–µ:\n"
            f"‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {format_currency(payment)}\n"
            f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {format_currency(total)}\n"
            f"‚Ä¢ –ü–µ—Ä–µ–ø–ª–∞—Ç–∞: {format_currency(over)}"
        )
        if insurance > 0:
            response += f"\n‚Ä¢ –°—Ç—Ä–∞—Ö–æ–≤–∫–∞: {insurance}% –≥–æ–¥–æ–≤—ã—Ö"
            
        await message.answer(response)
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

# ===== –î–ï–ü–û–ó–ò–¢ =====
@router.message(F.text == '–î–µ–ø–æ–∑–∏—Ç')
async def deposit_cmd(message: Message, state: FSMContext):
    await state.set_state(CalcStates.waiting_for_deposit)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–æ–∑–∏—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "–°—É–º–º–∞ –°—Ä–æ–∫(–ª–µ—Ç) –°—Ç–∞–≤–∫–∞(%) –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è(—Ä–∞–∑ –≤ –≥–æ–¥)\n"
        "–ü—Ä–∏–º–µ—Ä: 1 000 000 3 8 12"
    )

@router.message(CalcStates.waiting_for_deposit)
async def calculate_deposit_handler(message: Message, state: FSMContext):
    try:
        nums = parse_input(message.text)
        if len(nums) != 4:
            raise ValueError("–ù—É–∂–Ω–æ —Ä–æ–≤–Ω–æ 4 —á–∏—Å–ª–∞!")
            
        total, profit = calculate_deposit(*nums)
        await message.answer(
            f"üè¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –¥–µ–ø–æ–∑–∏—Ç—É:\n"
            f"‚Ä¢ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {format_currency(total)}\n"
            f"‚Ä¢ –î–æ—Ö–æ–¥: {format_currency(profit)}"
        )
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

# ===== –û–¢–ü–£–°–ö =====
@router.message(F.text == '–û—Ç–ø—É—Å–∫')
async def vacation_cmd(message: Message, state: FSMContext):
    await state.set_state(CalcStates.waiting_for_vacation)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "–ë—é–¥–∂–µ—Ç –î–Ω–∏ –†–∞—Å—Ö–æ–¥_–≤_–¥–µ–Ω—å\n"
        "–ü—Ä–∏–º–µ—Ä: 200 000 7 15 000"
    )

@router.message(CalcStates.waiting_for_vacation)
async def calculate_vacation_handler(message: Message, state: FSMContext):
    try:
        nums = parse_input(message.text)
        if len(nums) != 3:
            raise ValueError("–ù—É–∂–Ω–æ —Ä–æ–≤–Ω–æ 3 —á–∏—Å–ª–∞!")
            
        spent, remaining = calculate_vacation(*nums)
        await message.answer(
            f"‚úàÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –æ—Ç–ø—É—Å–∫—É:\n"
            f"‚Ä¢ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {format_currency(spent)}\n"
            f"‚Ä¢ –û—Å—Ç–∞–Ω–µ—Ç—Å—è: {format_currency(remaining)}"
        )
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@router.message()
async def unknown_input(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ", reply_markup=get_main_kb())